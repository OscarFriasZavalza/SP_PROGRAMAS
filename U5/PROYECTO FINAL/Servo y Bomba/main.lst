CCS PCM C Compiler, Version 5.015, 5967               08-jun.-23 15:38

               Filename:   C:\SP_PROGRAMAS\U5\PROYECTO FINAL\Servo y Bomba\main.lst

               ROM used:   91 words (9%)
                           Largest free fragment is 933
               RAM used:   5 (7%) at main() level
                           6 (9%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <16F84.h> 
.................... //////////// Standard Header file for the PIC16F84 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F84 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT 
.................... #use delay(clock = 4000000) 
0004:  MOVLW  12
0005:  MOVWF  04
0006:  MOVF   00,W
0007:  BTFSC  03.2
0008:  GOTO   017
0009:  MOVLW  01
000A:  MOVWF  0D
000B:  CLRF   0C
000C:  DECFSZ 0C,F
000D:  GOTO   00C
000E:  DECFSZ 0D,F
000F:  GOTO   00B
0010:  MOVLW  4A
0011:  MOVWF  0C
0012:  DECFSZ 0C,F
0013:  GOTO   012
0014:  GOTO   015
0015:  DECFSZ 00,F
0016:  GOTO   009
0017:  RETURN
.................... #USE STANDARD_IO(A) 
.................... #USE STANDARD_IO(B) 
.................... #define SERVO_PIN PIN_B0 
.................... #define BOMBA_PIN PIN_B1 
....................  
....................  
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
.................... { 
....................   
....................  
....................    while (1) 
....................    { 
....................       if(input(PIN_A0)==0){ 
001B:  BSF    03.5
001C:  BSF    05.0
001D:  BCF    03.5
001E:  BTFSC  05.0
001F:  GOTO   051
....................          //prendemos la bomba 
....................          output_high(BOMBA_PIN); 
0020:  BSF    03.5
0021:  BCF    06.1
0022:  BCF    03.5
0023:  BSF    06.1
....................          output_high(PIN_B3); 
0024:  BSF    03.5
0025:  BCF    06.3
0026:  BCF    03.5
0027:  BSF    06.3
....................          output_low(PIN_B2); 
0028:  BSF    03.5
0029:  BCF    06.2
002A:  BCF    03.5
002B:  BCF    06.2
....................  
....................          //prendemos servomotor 
....................          output_high(SERVO_PIN); // Activar el servo 
002C:  BSF    03.5
002D:  BCF    06.0
002E:  BCF    03.5
002F:  BSF    06.0
....................          delay_us(1000); // Retardo proporcional a la posición 
0030:  MOVLW  01
0031:  MOVWF  12
0032:  CALL   004
....................          output_low(SERVO_PIN); // Desactivar el servo 
0033:  BSF    03.5
0034:  BCF    06.0
0035:  BCF    03.5
0036:  BCF    06.0
....................          delay_ms(500); // Retardo entre posiciones 
0037:  MOVLW  02
0038:  MOVWF  11
0039:  MOVLW  FA
003A:  MOVWF  12
003B:  CALL   004
003C:  DECFSZ 11,F
003D:  GOTO   039
....................      
....................          output_high(SERVO_PIN); // Activar el servo 
003E:  BSF    03.5
003F:  BCF    06.0
0040:  BCF    03.5
0041:  BSF    06.0
....................          delay_us(2000); // Retardo proporcional a la posición 
0042:  MOVLW  02
0043:  MOVWF  12
0044:  CALL   004
....................          output_low(SERVO_PIN); // Desactivar el servo 
0045:  BSF    03.5
0046:  BCF    06.0
0047:  BCF    03.5
0048:  BCF    06.0
....................          delay_ms(500); // Retardo entre posiciones 
0049:  MOVLW  02
004A:  MOVWF  11
004B:  MOVLW  FA
004C:  MOVWF  12
004D:  CALL   004
004E:  DECFSZ 11,F
004F:  GOTO   04B
....................                  
....................       }else{ 
0050:  GOTO   059
....................          output_low(BOMBA_PIN); 
0051:  BSF    03.5
0052:  BCF    06.1
0053:  BCF    03.5
0054:  BCF    06.1
....................          output_low(SERVO_PIN); // Desactivar el servo 
0055:  BSF    03.5
0056:  BCF    06.0
0057:  BCF    03.5
0058:  BCF    06.0
....................       } 
0059:  GOTO   01B
....................          
....................    } 
.................... } 
....................  
005A:  SLEEP

Configuration Fuses:
   Word  1: 3FF1   XT NOWDT PUT NOPROTECT
