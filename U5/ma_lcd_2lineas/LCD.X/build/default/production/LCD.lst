MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;**************** THE WELS THEORY ******************
                      00002 ;Descripción: Visualizamos por el LCD la palabra 
                      00003 ; "Wels Theory" por 2s luego borra la pantalla por
                      00004 ; 1s y regresa nuevamente la palabra
                      00005 ;
                      00006 ;Para más información visita: www.thewelstheory.com
                      00007 ;Y sigueme en www.facebook.com/WelsTheory
                      00008 
Warning[205]: Found directive in column 1. (List)
                      00009 List P=16F84A ; Procesador PIC16f84A
                      00010 #include "p16f84a.inc" ;Incluye las librerias 
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : May 17 2017
                      00005 ;  MPASM PIC16F84A processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2017 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00209         LIST
                      00011     
                      00012 ; CONFIGURACION DEL PIC16F84A
2007   3FF1           00013  __CONFIG _FOSC_XT & _WDTE_OFF & _PWRTE_ON & _CP_OFF
                      00014 
                      00015 ;MEMORIA DE USUARIO
Warning[205]: Found directive in column 1. (CBLOCK)
                      00016 CBLOCK 0x0C
Warning[205]: Found directive in column 1. (ENDC)
                      00017 ENDC
                      00018  
                      00019 ;CODIGO
                      00020     ORG 0
0000                  00021 INICIO
0000   2???           00022     CALL    LCD_Inicializa 
0001                  00023 START
0001   3001           00024     MOVLW   1
0002   2???           00025     CALL    LCD_PosicionLinea1
0003   3045           00026     MOVLW   'E'
0004   2???           00027     CALL    LCD_Caracter
0005   3053           00028     MOVLW   'S'
0006   2???           00029     CALL    LCD_Caracter
0007   3054           00030     MOVLW   'T'
0008   2???           00031     CALL    LCD_Caracter
0009   3055           00032     MOVLW   'U'
000A   2???           00033     CALL    LCD_Caracter
000B   3044           00034     MOVLW   'D'
000C   2???           00035     CALL    LCD_Caracter
000D   3049           00036     MOVLW   'I'
000E   2???           00037     CALL    LCD_Caracter
000F   3041           00038     MOVLW   'A'
0010   2???           00039     CALL    LCD_Caracter
                      00040     
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00041     
0011   2???           00042     CALL    LCD_UnEspacioBlanco
                      00043     
0012   3043           00044     MOVLW   'C'
0013   2???           00045     CALL    LCD_Caracter
0014   3049           00046     MOVLW   'I'
0015   2???           00047     CALL    LCD_Caracter
0016   3043           00048     MOVLW   'C'
0017   2???           00049     CALL    LCD_Caracter
0018   304C           00050     MOVLW   'L'
0019   2???           00051     CALL    LCD_Caracter
001A   304F           00052     MOVLW   'O'
001B   2???           00053     CALL    LCD_Caracter
                      00054     
001C   3001           00055     MOVLW   1
001D   2???           00056     CALL    LCD_PosicionLinea2
001E   3046           00057     MOVLW   'F'
001F   2???           00058     CALL    LCD_Caracter
0020   304F           00059     MOVLW   'O'
0021   2???           00060     CALL    LCD_Caracter
0022   3052           00061     MOVLW   'R'
0023   2???           00062     CALL    LCD_Caracter
0024   304D           00063     MOVLW   'M'
0025   2???           00064     CALL    LCD_Caracter
0026   3041           00065     MOVLW   'A'
0027   2???           00066     CALL    LCD_Caracter
0028   3054           00067     MOVLW   'T'
0029   2???           00068     CALL    LCD_Caracter
002A   3049           00069     MOVLW   'I'
002B   2???           00070     CALL    LCD_Caracter
002C   3056           00071     MOVLW   'V'
002D   2???           00072     CALL    LCD_Caracter
002E   304F           00073     MOVLW   'O'
002F   2???           00074     CALL    LCD_Caracter
                      00075     
0030   2???           00076     CALL    LCD_UnEspacioBlanco
                      00077     
                      00078   
0031   3044           00079     MOVLW   'D'
0032   2???           00080     CALL    LCD_Caracter
0033   3050           00081     MOVLW   'P'
0034   2???           00082     CALL    LCD_Caracter
0035   3045           00083     MOVLW   'E'
0036   2???           00084     CALL    LCD_Caracter
                      00085     
                      00086    
0037   2???           00087     GOTO    START
                      00088         
                      00089 
                      00090    INCLUDE  <C:\Assembler-Pic16F84A\Librerias\LCD.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  0000000C            00025         LCD_Dato
  0000000D            00026         LCD_GuardaDato
  0000000E            00027         LCD_GuardaTRISB
  0000000F            00028         LCD_Auxiliar1
  00000010            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0038                  00045 LCD_Inicializa
0038   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0039   1005           00047         bcf     LCD_PinRS               ; R/W y E.
003A   1105           00048         bcf     LCD_PinEnable
003B   1085           00049         bcf     LCD_PinRW
003C   1283           00050         bcf     STATUS,RP0
003D   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado le indica
                      00052                                         ; que se va a escribir en el LCD.
003E   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD poniendo E=0.
003F   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando poniendo RS=0.
0040   2???           00055         call    Retardo_20ms
0041   3030           00056         movlw   b'00110000'     
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0042   2???           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0043   2???           00058         call    Retardo_5ms     
0044   3030           00059         movlw   b'00110000'     
0045   2???           00060         call    LCD_EscribeLCD
0046   2???           00061         call    Retardo_200micros
0047   3030           00062         movlw   b'00110000'     
0048   2???           00063         call    LCD_EscribeLCD
0049   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
004A   2???           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
004B   2???           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
004C   2???           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
004D   2???           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
004E   2???           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
004F   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el pin
                      00078 ; Enable del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B que
                      00079 ; no son utilizadas para el LCD (pines RB3:RB0), primero se lee estas líneas y después se
                      00080 ; vuelve a enviar este dato sin cambiarlo.
                      00081 
0050                  00082 LCD_EscribeLCD
0050   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
0051   008C           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
0052   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
0053   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
0054   048C           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
0055   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0056   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
0057   008E           00091         movwf   LCD_GuardaTRISB
0058   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
0059   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
005A   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
005B   080C           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
005C   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
005D   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD mediante un pequeño
005E   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
005F   1683           00100         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
0060   080E           00101         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
0061   0086           00102         movwf   PORTB                   ; Realmente es TRISB.
0062   1283           00103         bcf     STATUS,RP0              ; Acceso al Banco 0.
0063   0008           00104         return
                      00105 
                      00106 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00107 ;
                      00108 ;Los comandos que pueden ser ejecutados son:
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00109 ;
0064                  00110 LCD_CursorIncr                          ; Cursor en modo incrementar.
0064   3006           00111         movlw   b'00000110'
0065   2???           00112         goto    LCD_EnviaComando
0066                  00113 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0066   3080           00114         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0067   2???           00115         goto    LCD_EnviaComando
0068                  00116 LCD_Linea2                              ; Cursor al principio de la Línea 2.
0068   30C0           00117         movlw   b'11000000'             ; Dirección 40h de la DDRAM
0069   2???           00118         goto    LCD_EnviaComando
006A                  00119 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
006A   3880           00120         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
006B   2???           00121         goto    LCD_EnviaComando        ; registro W.
006C                  00122 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
006C   38C0           00123         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
006D   2???           00124         goto    LCD_EnviaComando        ; registro W.
006E                  00125 LCD_OFF                         ; Pantalla apagada.
006E   3008           00126         movlw   b'00001000'
006F   2???           00127         goto    LCD_EnviaComando
0070                  00128 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
0070   300E           00129         movlw   b'00001110'
0071   2???           00130         goto    LCD_EnviaComando
0072                  00131 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
0072   300C           00132         movlw   b'00001100'
0073   2???           00133         goto    LCD_EnviaComando
0074                  00134 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
0074   3001           00135         movlw   b'00000001'             ; cursor a principio de la línea 1.
0075   2???           00136         goto    LCD_EnviaComando
0076                  00137 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0076   3028           00138         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00139 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00140 
                      00141 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00142 ;
                      00143 ; "LCD_EnviaComando". Escribe un comando en el registro del módulo LCD. La palabra de
                      00144 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00145 ; "LCD_Caracter". Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00146 ; a través del registro W. Trabaja en Modo Dato.
                      00147 ;
0077                  00148 LCD_EnviaComando
0077   1005           00149         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0078   2???           00150         goto    LCD_Envia
0079                  00151 LCD_Caracter
0079   1405           00152         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
007A   2???           00153         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
007B                  00154 LCD_Envia
007B   008D           00155         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
007C   2???           00156         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
007D   0E0D           00157         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00158                                         ; nibble bajo del dato a enviar a parte alta del byte.
007E   2???           00159         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
007F   1C05           00160         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
0080   2???           00161         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0081   2???           00162         call    Retardo_50micros
0082   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
0083                  00177 LCD_CodigoCGROM
0083   008C           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
0084                  00179 LCD_EnheMinuscula                       ; un carácter especial.
0084   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
0085   1D03           00181         btfss   STATUS,Z
0086   2???           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
0087   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
0088   008C           00184         movwf   LCD_Dato
0089   2???           00185         goto    LCD_FinCGROM
008A                  00186 LCD_EnheMayuscula
008A   080C           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
008B   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
008C   1D03           00189         btfss   STATUS,Z
008D   2???           00190         goto    LCD_Grado               ; No es "Ñ".
008E   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
008F   008C           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0090   2???           00193         goto    LCD_FinCGROM    
0091                  00194 LCD_Grado
0091   080C           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0092   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
0093   1D03           00197         btfss   STATUS,Z
0094   2???           00198         goto    LCD_FinCGROM            ; No es "º".
0095   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
0096   008C           00200         movwf   LCD_Dato
0097                  00201 LCD_FinCGROM
0097   080C           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
0098   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0099                  00209 LCD_LineaEnBlanco
0099   3010           00210         movlw   LCD_CaracteresPorLinea
009A   2???           00211         goto    LCD_EnviaBlancos
009B                  00212 LCD_UnEspacioBlanco
009B   3001           00213         movlw   .1
009C   2???           00214         goto    LCD_EnviaBlancos
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

009D                  00215 LCD_DosEspaciosBlancos
009D   3002           00216         movlw   .2
009E   2???           00217         goto    LCD_EnviaBlancos
009F                  00218 LCD_TresEspaciosBlancos
009F   3003           00219         movlw   .3
00A0                  00220 LCD_EnviaBlancos
00A0   008F           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00A1                  00222 LCD_EnviaOtroBlanco     
00A1   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00A2   2???           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00A3   0B8F           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00A4   2???           00226         goto    LCD_EnviaOtroBlanco
00A5   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
00A6                  00240 LCD_Byte
00A6   0090           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00A7   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
00A8   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
00A9   2???           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
00AA   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
00AB   2???           00246         call    LCD_Caracter
00AC   2???           00247         goto    LCD_VisualizaBajo
                      00248 
00AD                  00249 LCD_ByteCompleto
00AD   0090           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00AE                  00251 LCD_VisualizaAlto
00AE   0E10           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
00AF   2???           00253         call    LCD_Nibble              ; Lo visualiza.
00B0                  00254 LCD_VisualizaBajo
00B0   0810           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
00B1                  00266 LCD_Nibble
00B1   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B2   008F           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
00B3   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00B4   1C03           00270         btfss   STATUS,C        
00B5   2???           00271         goto    LCD_EnviaByteLetra
00B6   080F           00272         movf    LCD_Auxiliar1,W
00B7   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00B8   2???           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00B9                  00275 LCD_EnviaByteLetra
00B9   080F           00276         movf    LCD_Auxiliar1,W
00BA   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00BB                  00278 LCD_FinVisualizaDigito
00BB   2???           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00281                                         
                      00282 ;       ===================================================================
                      00283 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00284 ;         E. Palacios, F. Remiro y L. López.
                      00285 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00286 ;       ===================================================================
                      00091     INCLUDE  <C:\Assembler-Pic16F84A\Librerias\RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000011            00021         R_ContA                         ; Contadores para los retardos.
  00000012            00022         R_ContB
  00000013            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
00BC                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00BC   0000           00033         nop                             ; Aporta 1 ciclo máquina.
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00BD   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00BE   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00BF   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00C0   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00C1                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00C1   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00C2                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00C2   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00C3                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00C3   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00C4   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00C5   2???           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00C6                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00C6   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00C7   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00C8   2???           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00C9                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00C9   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00CA   2???           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00CB                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00CB   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00CC   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00CD   2???           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00CE                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
00CE   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
00CF                  00066 RetardoMicros
00CF   0091           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00D0                  00068 Rmicros_Bucle
00D0   0B91           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00D1   2???           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
00D2   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
00D3                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
00D3   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00D4   2???           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D5                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
00D5   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D6   2???           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D7                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
00D7   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00D8   2???           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D9                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
00D9   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00DA   2???           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00DB                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
00DB   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00DC   2???           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00DD                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
00DD   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00DE   2???           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00DF                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
00DF   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00E0   2???           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00E1                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
00E1   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
00E2                  00111 Retardos_ms
00E2   0092           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
00E3                  00113 R1ms_BucleExterno
00E3   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
00E4   0091           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
00E5                  00116 R1ms_BucleInterno
00E5   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
00E6   0B91           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
00E7   2???           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
00E8   0B92           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00E9   2???           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
00EA   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
00EB                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
00EB   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00EC   2???           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00ED                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00ED   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00EE   2???           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00EF                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
00EF   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00F0   2???           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00F1                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
00F1   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00F2   2???           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00F3                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
00F3   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00F4   2???           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00F5                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
00F5   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
00F6                  00160 Retardo_1Decima
00F6   0093           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
00F7                  00162 R1Decima_BucleExterno2
00F7   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
00F8   0092           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
00F9                  00165 R1Decima_BucleExterno
00F9   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
00FA   0091           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
00FB                  00168 R1Decima_BucleInterno          
00FB   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
00FC   0B91           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
00FD   2???           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
00FE   0B92           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
00FF   2???           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0100   0B93           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0101   2???           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0102   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. López.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       =====================================================
3FF1                  00092  END
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
INDF                              00000000
INICIO                            00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
LCD_2Lineas4Bits5x7               00000076
LCD_Auxiliar1                     0000000F
LCD_Auxiliar2                     00000010
LCD_Borra                         00000074
LCD_BusDatos                      PORTB
LCD_Byte                          000000A6
LCD_ByteCompleto                  000000AD
LCD_Caracter                      00000079
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   00000083
LCD_CursorIncr                    00000064
LCD_CursorOFF                     00000072
LCD_CursorON                      00000070
LCD_Dato                          0000000C
LCD_DosEspaciosBlancos            0000009D
LCD_EnheMayuscula                 0000008A
LCD_EnheMinuscula                 00000084
LCD_Envia                         0000007B
LCD_EnviaBlancos                  000000A0
LCD_EnviaByteLetra                000000B9
LCD_EnviaComando                  00000077
LCD_EnviaOtroBlanco               000000A1
LCD_EscribeLCD                    00000050
LCD_FinCGROM                      00000097
LCD_FinVisualizaDigito            000000BB
LCD_Grado                         00000091
LCD_GuardaDato                    0000000D
LCD_GuardaTRISB                   0000000E
LCD_Inicializa                    00000038
LCD_Linea1                        00000066
LCD_Linea2                        00000068
LCD_LineaEnBlanco                 00000099
LCD_Nibble                        000000B1
LCD_OFF                           0000006E
LCD_PinEnable                     PORTA,2
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                0000006A
LCD_PosicionLinea2                0000006C
LCD_TresEspaciosBlancos           0000009F
LCD_UnEspacioBlanco               0000009B
LCD_VisualizaAlto                 000000AE
LCD_VisualizaBajo                 000000B0
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
R1Decima_BucleExterno             000000F9
R1Decima_BucleExterno2            000000F7
R1Decima_BucleInterno             000000FB
R1ms_BucleExterno                 000000E3
R1ms_BucleInterno                 000000E5
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000011
R_ContB                           00000012
R_ContC                           00000013
RetardoMicros                     000000CF
Retardo_100micros                 000000C9
Retardo_100ms                     000000D5
Retardo_10micros                  000000BC
Retardo_10ms                      000000DB
Retardo_10s                       000000ED
Retardo_1Decima                   000000F6
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_1ms                       000000E1
Retardo_1s                        000000F3
Retardo_200micros                 000000C6
Retardo_200ms                     000000D3
Retardo_20micros                  000000CE
Retardo_20ms                      000000D9
Retardo_20s                       000000EB
Retardo_2ms                       000000DF
Retardo_2s                        000000F1
Retardo_4micros                   000000C2
Retardo_500micros                 000000C3
Retardo_500ms                     000000F5
Retardo_50micros                  000000CB
Retardo_50ms                      000000D7
Retardo_5micros                   000000C1
Retardo_5ms                       000000DD
Retardo_5s                        000000EF
Retardos_ms                       000000E2
Rmicros_Bucle                     000000D0
START                             00000001
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CONFIG                           00002007
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
MPASM 5.74                           LCD.ASM   5-17-2023  21:24:09         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001

Errors   :     0
Warnings :     3 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

