CCS PCM C Compiler, Version 5.015, 5967               05-jun.-23 22:19

               Filename:   C:\SP_PROGRAMAS\U5\seguidor_linea\parte1_proyecto\seguidor_linea.lst

               ROM used:   52 words (5%)
                           Largest free fragment is 972
               RAM used:   5 (7%) at main() level
                           5 (7%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   013
0003:  NOP
.................... #include <16F84A.h> 
.................... //////////// Standard Header file for the PIC16F84A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F84A 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT 
.................... #use delay(clock = 4000000) 
.................... #use fast_io(B) // Configuramos los TRIS solo una vez, es la forma más rápida de trabajar con los puertos 
.................... #use fast_io(A) 
....................  
....................  
.................... void frente(void) // Ambos motores al máximo de potencia 
.................... { 
....................    output_high(PIN_B0); 
*
0010:  BSF    06.0
....................    output_high(PIN_B3); 
0011:  BSF    06.3
0012:  GOTO   032 (RETURN)
.................... } 
....................  
.................... void izquierda(void) // La potencia del motor derecho es mayor a la del izquierdo 
.................... { 
....................    output_low(PIN_B0); 
*
000A:  BCF    06.0
....................    output_high(PIN_B3); 
000B:  BSF    06.3
000C:  GOTO   02B (RETURN)
.................... } 
....................  
.................... void derecha(void) 
.................... { 
....................   output_high(PIN_B0); 
*
0007:  BSF    06.0
....................    output_low(PIN_B3); 
0008:  BCF    06.3
0009:  GOTO   027 (RETURN)
.................... } 
....................  
....................  
.................... void detener(void) 
.................... { 
.................... output_low(PIN_B0); 
*
000D:  BCF    06.0
.................... output_low(pIN_B3); 
000E:  BCF    06.3
000F:  GOTO   02F (RETURN)
.................... } 
.................... void arrancar(void){ 
.................... output_high(PIN_B2); 
*
0004:  BSF    06.2
.................... output_high(pIN_B5); 
0005:  BSF    06.5
0006:  GOTO   01E (RETURN)
.................... } 
.................... void main(void) 
*
0013:  MOVF   03,W
0014:  ANDLW  1F
0015:  MOVWF  03
0016:  CLRF   11
.................... {  
....................    int sensores = 0b00; 
....................    set_tris_B(0b00000000); // Puerto B como salidas 
0017:  MOVLW  00
0018:  BSF    03.5
0019:  MOVWF  06
....................    set_tris_A(0b11111111); // Puerto A como entradas digitales 
001A:  MOVLW  FF
001B:  MOVWF  05
....................  
....................    arrancar(); 
001C:  BCF    03.5
001D:  GOTO   004
....................  
....................    // Dirección de los motores hacia adelante 
....................    output_high(PIN_B0); 
001E:  BSF    06.0
....................    output_low(PIN_B1); 
001F:  BCF    06.1
....................    output_high(PIN_B3); 
0020:  BSF    06.3
....................    output_low(PIN_B4); 
0021:  BCF    06.4
....................  
....................  
....................    while (1) 
....................    { 
....................       sensores = input_A(); // Lectura de los sensores en el puerto A 
0022:  MOVF   05,W
0023:  MOVWF  11
....................  
....................       // Control del movimiento del robot en función de los sensores 
....................      
....................        if (sensores == 0b01){ 
0024:  DECFSZ 11,W
0025:  GOTO   027
....................             derecha(); 
0026:  GOTO   007
....................              delay_us(1000000); 
....................        } 
....................           
....................       if(sensores==0b10){ 
0027:  MOVF   11,W
0028:  SUBLW  02
0029:  BTFSC  03.2
....................          izquierda(); 
002A:  GOTO   00A
....................          delay_us(1000000); 
....................  
....................       } 
....................       if(sensores==0b11){ 
002B:  MOVF   11,W
002C:  SUBLW  03
002D:  BTFSC  03.2
....................          detener(); 
002E:  GOTO   00D
....................          delay_us(1000000); 
....................  
....................       } 
....................       if (sensores == 0b00){ 
002F:  MOVF   11,F
0030:  BTFSC  03.2
....................          frente(); 
0031:  GOTO   010
....................          delay_us(1000000); 
....................       } 
0032:  GOTO   022
....................           
....................    } 
.................... } 
0033:  SLEEP

Configuration Fuses:
   Word  1: 3FF1   XT NOWDT PUT NOPROTECT
