CCS PCM C Compiler, Version 5.015, 5967               05-jun.-23 22:47

               Filename:   C:\SP_PROGRAMAS\U5\seguidor_linea\parte1_proyecto\seguidor_linea.lst

               ROM used:   100 words (10%)
                           Largest free fragment is 924
               RAM used:   10 (15%) at main() level
                           11 (16%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   02A
0003:  NOP
....................  
.................... #include <16F84A.h> 
.................... //////////// Standard Header file for the PIC16F84A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F84A 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT 
.................... #use delay(clock = 4000000) 
*
0017:  MOVLW  12
0018:  SUBWF  16,F
0019:  BTFSS  03.0
001A:  GOTO   029
001B:  MOVLW  16
001C:  MOVWF  04
001D:  MOVLW  FC
001E:  ANDWF  00,F
001F:  BCF    03.0
0020:  RRF    00,F
0021:  RRF    00,F
0022:  MOVF   00,W
0023:  BTFSC  03.2
0024:  GOTO   029
0025:  GOTO   027
0026:  NOP
0027:  DECFSZ 00,F
0028:  GOTO   026
0029:  RETURN
.................... #use fast_io(B) // Configuramos los TRIS solo una vez, es la forma m?s r?pida de trabajar con los puertos 
.................... #use fast_io(A) 
....................  
.................... int pot_izq = 0; // Potencia del motor izquierdo 
.................... int pot_der = 0; // Potencia del motor derecho 
.................... int k_cerradas = 0; // Constante para curvas cerradas (0-255) 0 es curva muy cerrada, 255 es una recta --> Se recomienda usar un valor mayor a 20 
.................... int k = 150; // Constante para giro leve --> Se recomienda ajustar seg?n las caracter?sticas del robot 
....................  
.................... void frente(void) // Ambos motores al m?ximo de potencia 
.................... { 
....................    pot_izq = 255; 
....................    pot_der = 255; 
.................... } 
.................... void frente2(void) // Ambos motores al máximo de potencia 
.................... { 
....................    output_high(PIN_B0); 
*
0007:  BSF    06.0
....................    output_high(PIN_B3); 
0008:  BSF    06.3
0009:  GOTO   03F (RETURN)
.................... } 
....................  
.................... void izquierda_cerrada(void) 
.................... { 
....................    pot_izq = k_cerradas; 
*
000F:  MOVF   12,W
0010:  MOVWF  10
....................    pot_der = 255; 
0011:  MOVLW  FF
0012:  MOVWF  11
0013:  GOTO   048 (RETURN)
.................... } 
....................  
....................  
.................... void derecha_cerrada(void) 
.................... { 
....................    pot_izq = 255; 
*
000A:  MOVLW  FF
000B:  MOVWF  10
....................    pot_der = k_cerradas; 
000C:  MOVF   12,W
000D:  MOVWF  11
000E:  GOTO   044 (RETURN)
.................... } 
.................... void detener(void) 
.................... { 
.................... output_low(PIN_B2); 
*
0014:  BCF    06.2
.................... output_low(pIN_B5); 
0015:  BCF    06.5
0016:  GOTO   04C (RETURN)
.................... } 
.................... void prender(void){ 
.................... output_high(PIN_B2); 
*
0004:  BSF    06.2
.................... output_high(pIN_B5); 
0005:  BSF    06.5
0006:  GOTO   03A (RETURN)
.................... } 
.................... void main(void) 
*
002A:  MOVF   03,W
002B:  ANDLW  1F
002C:  MOVWF  03
002D:  CLRF   10
002E:  CLRF   11
002F:  CLRF   12
0030:  MOVLW  96
0031:  MOVWF  13
0032:  CLRF   14
.................... {  
....................    int sensores = 0b00; 
....................    set_tris_B(0b00000000); // Puerto B como salidas 
0033:  MOVLW  00
0034:  BSF    03.5
0035:  MOVWF  06
....................    set_tris_A(0b11111111); // Puerto A como entradas digitales 
0036:  MOVLW  FF
0037:  MOVWF  05
....................  
....................    prender(); 
0038:  BCF    03.5
0039:  GOTO   004
....................  
....................    // Direcci?n de los motores hacia adelante 
....................    output_high(PIN_B0); 
003A:  BSF    06.0
....................    output_low(PIN_B1); 
003B:  BCF    06.1
....................    output_high(PIN_B3); 
003C:  BSF    06.3
....................    output_low(PIN_B4); 
003D:  BCF    06.4
....................  
....................     frente2(); 
003E:  GOTO   007
....................  
....................    while (1) 
....................    { 
....................   
....................       sensores = input_A(); // Lectura de los sensores en el puerto A 
003F:  MOVF   05,W
0040:  MOVWF  14
....................  
....................       // Control del movimiento del robot en funci?n de los sensores 
....................      
....................       
....................      if (sensores == 0b01) 
0041:  DECFSZ 14,W
0042:  GOTO   044
....................          derecha_cerrada(); 
0043:  GOTO   00A
....................       if(sensores==0b10) 
0044:  MOVF   14,W
0045:  SUBLW  02
0046:  BTFSC  03.2
....................          izquierda_cerrada(); 
0047:  GOTO   00F
....................       if(sensores==0b11) 
0048:  MOVF   14,W
0049:  SUBLW  03
004A:  BTFSC  03.2
....................          detener(); 
004B:  GOTO   014
....................   
....................  
....................       // Control de los motores izquierdo y derecho mediante el ajuste de los pines B2 y B5 
....................       output_high(PIN_B2); // Activa el motor izquierdo 
004C:  BSF    06.2
....................       delay_us(pot_izq); // Retardo proporcionado por la potencia establecida en "pot_izq" 
004D:  MOVF   10,W
004E:  MOVWF  16
004F:  CALL   017
....................  
....................       output_low(PIN_B2); // Desactiva el motor izquierdo 
0050:  BCF    06.2
....................       delay_us(255 - pot_izq); // Retardo complementario para mantener el ciclo de trabajo 
0051:  MOVF   10,W
0052:  SUBLW  FF
0053:  MOVWF  15
0054:  MOVF   15,W
0055:  MOVWF  16
0056:  CALL   017
....................  
....................       output_high(PIN_B5); // Activa el motor derecho 
0057:  BSF    06.5
....................       delay_us(pot_der); // Retardo proporcionado por la potencia establecida en "pot_der" 
0058:  MOVF   11,W
0059:  MOVWF  16
005A:  CALL   017
....................  
....................       output_low(PIN_B5); // Desactiva el motor derecho 
005B:  BCF    06.5
....................       delay_us(255 - pot_der); // Retardo complementario para mantener el ciclo de trabajo 
005C:  MOVF   11,W
005D:  SUBLW  FF
005E:  MOVWF  15
005F:  MOVF   15,W
0060:  MOVWF  16
0061:  CALL   017
0062:  GOTO   03F
....................  
....................    } 
.................... } 
0063:  SLEEP

Configuration Fuses:
   Word  1: 3FF1   XT NOWDT PUT NOPROTECT
