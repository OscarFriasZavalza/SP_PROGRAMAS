CCS PCM C Compiler, Version 5.015, 5967               05-jun.-23 19:41

               Filename:   C:\SP_PROGRAMAS\U5\seguidor_linea\parte1_proyecto\seguidor_linea.lst

               ROM used:   104 words (10%)
                           Largest free fragment is 920
               RAM used:   10 (15%) at main() level
                           11 (16%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   02B
0003:  NOP
.................... #include <16F84A.h> 
.................... //////////// Standard Header file for the PIC16F84A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F84A 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT 
.................... #use delay(clock = 4000000) 
*
0018:  MOVLW  12
0019:  SUBWF  16,F
001A:  BTFSS  03.0
001B:  GOTO   02A
001C:  MOVLW  16
001D:  MOVWF  04
001E:  MOVLW  FC
001F:  ANDWF  00,F
0020:  BCF    03.0
0021:  RRF    00,F
0022:  RRF    00,F
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   02A
0026:  GOTO   028
0027:  NOP
0028:  DECFSZ 00,F
0029:  GOTO   027
002A:  RETURN
.................... #use fast_io(B) // Configuramos los TRIS solo una vez, es la forma más rápida de trabajar con los puertos 
.................... #use fast_io(A) 
....................  
.................... int pot_izq = 0; // Potencia del motor izquierdo 
.................... int pot_der = 0; // Potencia del motor derecho 
.................... int k_cerradas = 20; // Constante para curvas cerradas (0-255) 0 es curva muy cerrada, 255 es una recta --> Se recomienda usar un valor mayor a 20 
.................... int k = 150; // Constante para giro leve --> Se recomienda ajustar según las características del robot 
....................  
.................... void frente(void) // Ambos motores al máximo de potencia 
.................... { 
....................    pot_izq = 220; 
*
0007:  MOVLW  DC
0008:  MOVWF  10
....................    pot_der = 220; 
0009:  MOVWF  11
000A:  GOTO   045 (RETURN)
.................... } 
....................  
....................  
.................... void izquierda_cerrada(void) 
.................... { 
....................    pot_izq = k_cerradas; 
*
0010:  MOVF   12,W
0011:  MOVWF  10
....................    pot_der = 220; 
0012:  MOVLW  DC
0013:  MOVWF  11
0014:  GOTO   04C (RETURN)
.................... } 
....................  
....................  
.................... void derecha_cerrada(void) 
.................... { 
....................    pot_izq = 220; 
*
000B:  MOVLW  DC
000C:  MOVWF  10
....................    pot_der = k_cerradas; 
000D:  MOVF   12,W
000E:  MOVWF  11
000F:  GOTO   048 (RETURN)
.................... } 
.................... void detener(void) 
.................... { 
.................... output_low(PIN_B2); 
*
0015:  BCF    06.2
.................... output_low(pIN_B5); 
0016:  BCF    06.5
0017:  GOTO   050 (RETURN)
.................... } 
.................... void prender(void){ 
.................... output_high(PIN_B2); 
*
0004:  BSF    06.2
.................... output_high(pIN_B5); 
0005:  BSF    06.5
0006:  GOTO   03C (RETURN)
.................... } 
.................... void main(void) 
*
002B:  MOVF   03,W
002C:  ANDLW  1F
002D:  MOVWF  03
002E:  CLRF   10
002F:  CLRF   11
0030:  MOVLW  14
0031:  MOVWF  12
0032:  MOVLW  96
0033:  MOVWF  13
0034:  CLRF   14
.................... {  
....................    int sensores = 0b00; 
....................    set_tris_B(0b00000000); // Puerto B como salidas 
0035:  MOVLW  00
0036:  BSF    03.5
0037:  MOVWF  06
....................    set_tris_A(0b11111111); // Puerto A como entradas digitales 
0038:  MOVLW  FF
0039:  MOVWF  05
....................  
....................    prender(); 
003A:  BCF    03.5
003B:  GOTO   004
....................  
....................    // Dirección de los motores hacia adelante 
....................    output_high(PIN_B0); 
003C:  BSF    06.0
....................    output_low(PIN_B1); 
003D:  BCF    06.1
....................    output_high(PIN_B3); 
003E:  BSF    06.3
....................    output_low(PIN_B4); 
003F:  BCF    06.4
....................  
....................  
....................    while (1) 
....................    { 
....................       sensores = input_A(); // Lectura de los sensores en el puerto A 
0040:  MOVF   05,W
0041:  MOVWF  14
....................  
....................       // Control del movimiento del robot en función de los sensores 
....................       if (sensores == 0b00) 
0042:  MOVF   14,F
0043:  BTFSC  03.2
....................          frente(); 
0044:  GOTO   007
....................       if (sensores == 0b01) 
0045:  DECFSZ 14,W
0046:  GOTO   048
....................          derecha_cerrada(); 
0047:  GOTO   00B
....................       if(sensores==0b10) 
0048:  MOVF   14,W
0049:  SUBLW  02
004A:  BTFSC  03.2
....................          izquierda_cerrada(); 
004B:  GOTO   010
....................       if(sensores==0b11) 
004C:  MOVF   14,W
004D:  SUBLW  03
004E:  BTFSC  03.2
....................          detener(); 
004F:  GOTO   015
....................       
....................       // Control de los motores izquierdo y derecho mediante el ajuste de los pines B2 y B5 
....................       output_high(PIN_B0); // Activa el motor izquierdo 
0050:  BSF    06.0
....................       delay_us(pot_izq); // Retardo proporcionado por la potencia establecida en "pot_izq" 
0051:  MOVF   10,W
0052:  MOVWF  16
0053:  CALL   018
....................  
....................       output_low(PIN_B0); // Desactiva el motor izquierdo 
0054:  BCF    06.0
....................       delay_us(255 - pot_izq); // Retardo complementario para mantener el ciclo de trabajo 
0055:  MOVF   10,W
0056:  SUBLW  FF
0057:  MOVWF  15
0058:  MOVF   15,W
0059:  MOVWF  16
005A:  CALL   018
....................  
....................       output_high(PIN_B3); // Activa el motor derecho 
005B:  BSF    06.3
....................       delay_us(pot_der); // Retardo proporcionado por la potencia establecida en "pot_der" 
005C:  MOVF   11,W
005D:  MOVWF  16
005E:  CALL   018
....................  
....................       output_low(PIN_B3); // Desactiva el motor derecho 
005F:  BCF    06.3
....................       delay_us(255 - pot_der); // Retardo complementario para mantener el ciclo de trabajo 
0060:  MOVF   11,W
0061:  SUBLW  FF
0062:  MOVWF  15
0063:  MOVF   15,W
0064:  MOVWF  16
0065:  CALL   018
0066:  GOTO   040
....................       
....................    } 
.................... } 
0067:  SLEEP

Configuration Fuses:
   Word  1: 3FF1   XT NOWDT PUT NOPROTECT
